import React, { useState, useEffect, useRef, useDeferredValue } from 'react';
import { marked } from 'marked';
import katex from 'katex';
import mermaid from 'mermaid';
import html2pdf from 'html2pdf.js';
import 'katex/dist/katex.min.css';
import './App.css';
import exampleMarkdown from './example_ru.md?raw';
import exampleMarkdownEn from './example_en.md?raw';
import exampleMarkdownEs from './example_es.md?raw';
import { translations } from './translations';

function App() {
  const [language, setLanguage] = useState('en');
  const [theme, setTheme] = useState('light');
  const [markdown, setMarkdown] = useState(exampleMarkdownEn);
  
  const t = translations[language];
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º useDeferredValue –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é
  const deferredMarkdown = useDeferredValue(markdown);
  
  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–µ–≤—å—é –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è
  const isPending = deferredMarkdown !== markdown;

  const previewRef = useRef(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
  const handleLanguageChange = (newLanguage) => {
    setLanguage(newLanguage);
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    if (newLanguage === 'en') {
      setMarkdown(exampleMarkdownEn);
    } else if (newLanguage === 'es') {
      setMarkdown(exampleMarkdownEs);
    } else {
      setMarkdown(exampleMarkdown);
    }
  };

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ marked
  marked.setOptions({
    breaks: true,
    gfm: true
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –ø—Ä–µ–≤—å—é
  const renderPreview = async () => {
    if (previewRef.current) {
      try {
        let html = marked(deferredMarkdown);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        html = html.replace(/\$([^$]+)\$/g, (match, formula) => {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–æ—Ä–º—É–ª–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            if (/[–∞-—è—ë]/i.test(formula)) {
              return match; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            }
            
            return katex.renderToString(formula, { 
              displayMode: false,
              strict: false, // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º
              throwOnError: false, // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
              errorColor: '#cc0000'
            });
          } catch (e) {
            return match;
          }
        });
        
        html = html.replace(/\$\$([^$]+)\$\$/g, (match, formula) => {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ñ–æ—Ä–º—É–ª–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
            if (/[–∞-—è—ë]/i.test(formula)) {
              return match; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ–æ—Ä–º—É–ª—É –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            }
            
            return katex.renderToString(formula, { 
              displayMode: true,
              strict: false, // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º
              throwOnError: false, // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
              errorColor: '#cc0000'
            });
          } catch (e) {
            return match;
          }
        });
        
        previewRef.current.innerHTML = html;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mermaid –¥–∏–∞–≥—Ä–∞–º–º
        mermaid.initialize({
          startOnLoad: false,
          theme: 'default',
          securityLevel: 'loose'
        });
        
        // –†–µ–Ω–¥–µ—Ä –≤—Å–µ—Ö –¥–∏–∞–≥—Ä–∞–º–º Mermaid
        const mermaidElements = previewRef.current.querySelectorAll('pre code.language-mermaid');
        
        for (let i = 0; i < mermaidElements.length; i++) {
          const element = mermaidElements[i];
          try {
            const graphDefinition = element.textContent;
            if (graphDefinition.trim()) {
              const { svg } = await mermaid.render(`mermaid-${i}`, graphDefinition);
              element.parentElement.innerHTML = svg;
            }
          } catch (error) {
            element.parentElement.innerHTML = `<div style="color: red; padding: 10px; border: 1px solid red; border-radius: 4px;">${t.errorMermaidDiagram} ${error.message}</div>`;
          }
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø—Ä–µ–≤—å—é:', error);
        previewRef.current.innerHTML = `<div style="color: red; padding: 10px;">${t.errorRendering} ${error.message}</div>`;
      }
    }
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ markdown
  useEffect(() => {
    const updatePreview = async () => {
      await renderPreview();
    };
    updatePreview();
  }, [deferredMarkdown]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
  const generatePDF = async () => {
    if (previewRef.current) {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é, —á—Ç–æ–±—ã –≤—Å–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –±—ã–ª–∏ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω—ã
        await renderPreview();
        
        const element = previewRef.current;
      
      const opt = {
        margin: [0.5, 1, 1, 1], // [top, right, bottom, left] –≤ –¥—é–π–º–∞—Ö
        filename: 'markdown-document.pdf',
        image: { type: 'jpeg', quality: 0.98 },
        html2canvas: { 
          scale: 2,
          useCORS: true,
          letterRendering: true
        },
        jsPDF: { 
          unit: 'in', 
          format: 'a4', 
          orientation: 'portrait',
          compress: true
        }
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è PDF
      const style = document.createElement('style');
      style.textContent = `
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500&display=swap');
        
        body {
          font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
          line-height: 1.6;
          color: #333;
          max-width: 800px;
          margin: 0 auto;
          padding: 10px; /* —É–º–µ–Ω—å—à–µ–Ω –≤–µ—Ä—Ö–Ω–∏–π –æ—Ç—Å—Ç—É–ø */
        }
        
        h1, h2, h3, h4, h5, h6 {
          color: #2c3e50;
          margin-top: 1.5em;
          margin-bottom: 0.5em;
        }
        
        h1:first-child {
          margin-top: 0.5em; /* —É–º–µ–Ω—å—à–µ–Ω –æ—Ç—Å—Ç—É–ø —É –ø–µ—Ä–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ */
        }
        
        h1 { font-size: 2em; border-bottom: 2px solid #3498db; padding-bottom: 0.3em; }
        h2 { font-size: 1.5em; border-bottom: 1px solid #bdc3c7; padding-bottom: 0.2em; }
        h3 { font-size: 1.3em; }
        
        p { margin-bottom: 1em; }
        
        code {
          font-family: 'JetBrains Mono', 'Fira Code', monospace;
          background-color: #f8f9fa;
          padding: 0.2em 0.4em;
          border-radius: 3px;
          font-size: 0.9em;
        }
        
        pre {
          background-color: #f8f9fa;
          padding: 1em;
          border-radius: 5px;
          overflow-x: auto;
          margin: 1em 0;
        }
        
        pre code {
          background: none;
          padding: 0;
        }
        
        blockquote {
          border-left: 4px solid #3498db;
          margin: 1em 0;
          padding-left: 1em;
          color: #666;
          font-style: italic;
        }
        
        table {
          border-collapse: collapse;
          width: 100%;
          margin: 1em 0;
        }
        
        th, td {
          border: 1px solid #ddd;
          padding: 0.75em;
          text-align: left;
        }
        
        th {
          background-color: #f8f9fa;
          font-weight: 600;
        }
        
        ul, ol {
          margin: 1em 0;
          padding-left: 2em;
        }
        
        li {
          margin-bottom: 0.5em;
        }
        
        a {
          color: #3498db;
          text-decoration: none;
        }
        
        a:hover {
          text-decoration: underline;
        }
        
        .katex {
          font-size: 1.1em;
        }
        
        .katex-display {
          margin: 1em 0;
          text-align: center;
        }
      `;
      
      document.head.appendChild(style);
      
        html2pdf().set(opt).from(element).save().then(() => {
          document.head.removeChild(style);
        }).catch((error) => {
          console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
          alert(t.errorGeneratingPDF + ' ' + error.message);
          document.head.removeChild(style);
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ PDF:', error);
        alert(t.errorPreparingPDF + ' ' + error.message);
      }
    }
  };

  return (
    <div className={`app ${theme}`}>
      <header className="header">
        <div className="header-top">
          <div className="header-actions">
            <div className="language-switcher">
              <select 
                value={language} 
                onChange={(e) => handleLanguageChange(e.target.value)}
                className="language-select"
              >
                <option value="en">üá∫üá∏ English</option>
                <option value="ru">üá∑üá∫ –†—É—Å—Å–∫–∏–π</option>
                <option value="es">üá™üá∏ Espa√±ol</option>
              </select>
            </div>
            <button 
              className="theme-toggle"
              onClick={() => setTheme(theme === 'light' ? 'dark' : 'light')}
              title={theme === 'light' ? '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É' : '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É'}
            >
              {theme === 'light' ? 'üåô' : '‚òÄÔ∏è'}
            </button>
          </div>
        </div>
        <h1 className="header-title">{t.title}</h1>
        <div className="header-controls">
          <button onClick={() => renderPreview()} className="btn btn-secondary">
            {t.showPreview}
          </button>
          <button onClick={() => generatePDF()} className="btn btn-primary">
            {t.saveToPDF}
          </button>
        </div>
      </header>
      
      <div className="container">
        <div className="editor-panel">
          <h2>{t.markdownEditor}</h2>
          <textarea
            value={markdown}
            onChange={(e) => setMarkdown(e.target.value)}
            className="markdown-editor"
            placeholder={t.placeholder}
          />
        </div>
        
        <div className="preview-panel">
          <h2>
            {t.preview}
            {isPending && <span className="loading-indicator"> (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...)</span>}
          </h2>
          <div ref={previewRef} className="markdown-preview"></div>
        </div>
      </div>
    </div>
  );
}

export default App;